<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:local="clr-namespace:XIMALAYA.PCDesktop.Controls">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
		<ResourceDictionary Source="pack://application:,,,/XIMALAYA.PCDesktop.Controls;component/Styles/Converter.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<ControlTemplate x:Key="MyToggleButtonTemplate" TargetType="local:MyToggleButton">
		<Grid Background="Transparent">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimation Duration="0:0:0.1" 
											 Storyboard.TargetName="Part_Scale" 
											 Storyboard.TargetProperty="ScaleX" To="1"/>
							<DoubleAnimation Duration="0:0:0.1" 
											 Storyboard.TargetName="Part_Scale" 
											 Storyboard.TargetProperty="ScaleY" To="1"/>

							<ColorAnimation x:Name="Part_ColorAnimation"
											Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
											Storyboard.TargetName="contentPresenter"
											Duration="0:0:0.0"
											To="White"/>
							<ColorAnimation x:Name="Part_ColorCheckAnimation"
											Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
											Storyboard.TargetName="contentCheckedPresenter"
											Duration="0:0:0.0"
											To="White"/>

						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimation Duration="0" 
											 Storyboard.TargetName="Part_Scale" 
											 Storyboard.TargetProperty="ScaleX" To="1"/>
							<DoubleAnimation Duration="0" 
											 Storyboard.TargetName="Part_Scale" 
											 Storyboard.TargetProperty="ScaleY" To="1"/>

						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimation Duration="0:0:0.1" 
											 Storyboard.TargetName="contentPresenter" 
											 Storyboard.TargetProperty="Opacity" To="0"/>
							<DoubleAnimation Duration="0:0:0.1" 
											 Storyboard.TargetName="contentCheckedPresenter" 
											 Storyboard.TargetProperty="Opacity" To="1"/>
							<DoubleAnimation Duration="0"
											 Storyboard.TargetName="PART_BackGround"
											 Storyboard.TargetProperty="Opacity" To="1"/>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked">
						<Storyboard>
							<DoubleAnimation Duration="0:0:0.1" 
											 Storyboard.TargetName="contentPresenter" 
											 Storyboard.TargetProperty="Opacity" To="1"/>
							<DoubleAnimation Duration="0:0:0.1" 
											 Storyboard.TargetName="contentCheckedPresenter" 
											 Storyboard.TargetProperty="Opacity" To="0"/>
							<DoubleAnimation Duration="0"
											 Storyboard.TargetName="PART_BackGround"
											 Storyboard.TargetProperty="Opacity" To="0"/>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualState x:Name="Focused">
						<Storyboard>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unfocused" />
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<!--边框和背景色-->
			<Border x:Name="PART_Border"
					BorderBrush="{TemplateBinding BorderBrush}"
				    BorderThickness="{TemplateBinding BorderThickness}"
					Visibility="{TemplateBinding IsShowBorder,Converter={StaticResource BooleanToVisibilityConverter}}"
					CornerRadius="{TemplateBinding CornerRadius}"
					Opacity="1">
				<Rectangle x:Name="PART_Fill" 
					       RadiusX="{TemplateBinding RadiusSize}"
					       RadiusY="{TemplateBinding RadiusSize}"
					       Fill="{TemplateBinding Background}">
					<Rectangle.RenderTransform>
						<TransformGroup>
							<TransformGroup.Children>
								<ScaleTransform x:Name="Part_Scale" 
											CenterX="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=local:MyToggleButton},Converter={StaticResource HalfValueConverter}}"
											CenterY="{Binding ActualHeight,RelativeSource={RelativeSource FindAncestor, AncestorType=local:MyToggleButton},Converter={StaticResource HalfValueConverter}}"
											ScaleX="0" 
											ScaleY="0" />
							</TransformGroup.Children>
						</TransformGroup>
					</Rectangle.RenderTransform>
				</Rectangle>
			</Border>
			<!--选中的背景色-->
			<Rectangle x:Name="PART_BackGround" 
					   Visibility="{TemplateBinding IsBackground}"
					   Margin="{TemplateBinding BorderThickness}"
					   RadiusX="{TemplateBinding RadiusSize}"
					   RadiusY="{TemplateBinding RadiusSize}"
					   Opacity="0"
					   Fill="{TemplateBinding Background}"/>
			<!--未选中内容-->
			<Label x:Name="contentPresenter"
				   Margin="0"
				   Padding="0"
				   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				   Foreground="{TemplateBinding ForegroundChecked}">
				<ContentPresenter 
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>
			</Label>
			<!--选中内容-->
			<Label x:Name="contentCheckedPresenter"
				   Margin="0"
				   Padding="0"
				   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				   Foreground="{TemplateBinding ForegroundChecked}">
				<ContentPresenter 
                              Content="{TemplateBinding ContentChecked}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>
			</Label>
		</Grid>
	</ControlTemplate>

	<Style TargetType="local:MyToggleButton">
		<Setter Property="Template" Value="{StaticResource MyToggleButtonTemplate}"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="ForegroundChecked" Value="{Binding Foreground,RelativeSource={RelativeSource Self}}"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="False">
				<Setter Property="ForegroundChecked" Value="{Binding Background,RelativeSource={RelativeSource Self}}"/>
			</Trigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsChecked,RelativeSource={RelativeSource Self}}" Value="True"/>
					<Condition Binding="{Binding IsBackground,RelativeSource={RelativeSource Self}}" Value="Visible"/>
				</MultiDataTrigger.Conditions>
				<Setter Property="ForegroundChecked" Value="{Binding Foreground,RelativeSource={RelativeSource Self}}"/>
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>
