// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 SoundDataConfigurationAppend 分部方法。
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using FluentJson.Configuration;
using FluentJson;
using XIMALAYA.PCDesktop.Core.Models.Sound;

namespace XIMALAYA.PCDesktop.Core.Data
{
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="T1"></typeparam>
    partial class SoundDataConfigDecorator<T, T1> : JsonConfigDecorator<T, T1>
        where T : SoundData
        where T1 : class
    {

        /// <summary>
        /// 添加配置
        /// </summary>
        partial void AppendConfig()
        {
            this.Config.MapType<T>(map => map.AllFields()
                .Field<long>(field => field.TrackId, toTid => toTid
                    .To("toTid")
                )
                .Field<long>(field => field.AlbumID, albumID => albumID
                    .To("albumID")
                )
                .Field<string>(field => field.AlbumTitle, albumName => albumName
                    .To("albumName")
                )
                .Field<long>(field => field.CommentCount, comments => comments
                    .To("comments")
                )
                .Field<long>(field => field.CreateAt, createdAt => createdAt
                    .To("createdAt")
                )
                .Field<double>(field => field.Duration, duration => duration
                    .To("duration")
                )
                .Field<bool>(field => field.IsLike, isLike => isLike
                    .To("isLike")
                )
                .Field<bool>(field => field.IsRelay, isRelay => isRelay
                    .To("isRelay")
                )
                .Field<long>(field => field.LikeCount, likes => likes
                    .To("likes")
                )
                .Field<string>(field => field.PlayUrl32, mUrl => mUrl
                    .To("url")
                )
                .Field<long>(field => field.PlayCount, playtimes => playtimes
                    .To("playtimes")
                )
                .Field<long>(field => field.ShareCount, shares => shares
                    .To("shares")
                )
                .Field<string>(field => field.Title, title => title
                    .To("title")
                )
                .Field<int>(field => field.UploadSource, uploadSource => uploadSource
                    .To("uploadSource")
                )
                .Field<int>(field => field.OpType, userSource => userSource
                    .To("userSource")
                )
                .Field<string>(field => field.WaveForm, waveform => waveform
                    .To("waveform")
                )
            );
        }

    }
}
