// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 CategoryDataConfigurationAppend 分部方法。
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using FluentJson.Configuration;
using FluentJson;
using XIMALAYA.PCDesktop.Core.Models.Category;

namespace XIMALAYA.PCDesktop.Core.Data
{
    partial class CategoryDataConfigDecorator<T, T1> : JsonConfigDecorator<T, T1>
        where T : CategoryData
        where T1 : class
    {

        /// <summary>
        /// 添加配置
        /// </summary>
        partial void AppendConfig()
        {
            this.Config.MapType<T>(map => map.AllFields()
               .Field<string>(field => field.CoverPath, cp => cp
                   .To("coverPath")
               ).Field<bool>(field => field.IsDisplay, cp => cp
                   .To("isChecked")
               ).Field<string>(field => field.Title, cp => cp
                   .To("title")
               ).Field<int>(field => field.OrderNum, cp => cp
                   .To("orderNum")
               ));
        }
    }
}
